{"version":3,"sources":["server.ts"],"names":[],"mappings":"AAAA,qDAAqD;AACrD,wDAAwD;AAExD,IAAO,EAAE,WAAW,IAAI,CAAC,CAAC;AAC1B,IAAO,KAAK,WAAW,OAAO,CAAC,CAAC;AAEhC,IAAO,OAAO,WAAW,SAAS,CAAC,CAAC;AACpC,IAAI,iBAAiB,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;AACvC,IAAI,iBAAiB,GAAG,OAAO,CAAC,qBAAqB,CAAC,CAAC;AAEvD,AACA,gBADgB;IACZ,GAAG,GAAG,OAAO,EAAE,CAAC;AAEpB,AACA,0CAD0C;AAC1C,iBAAiB,CAAC,gBAAgB,CAAC,SAAS,GAAG,QAAQ,CAAC,CAAC;AAEzD,AACA,yDADyD;AACzD,GAAG,CAAC,GAAG,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;AAC9B,AACA,+DAD+D;AAC/D,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,SAAS,GAAG,QAAQ,CAAC,CAAC;AAEvC,AACA,gDADgD;AAChD,GAAG,CAAC,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,MAAM,CAAC,SAAS,GAAG,YAAY,CAAC,CAAC,CAAC;AAC7D,GAAG,CAAC,GAAG,CAAC,gBAAgB,EAAE,OAAO,CAAC,MAAM,CAAC,SAAS,GAAG,yBAAyB,CAAC,CAAC,CAAC;AACjF,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,SAAS,GAAG,SAAS,CAAC,CAAC,CAAC;AAEvD,AACA,8BAD8B;IAC1B,WAAW,GAAG,IAAI,iBAAiB,CAAC,GAAG,CAAC,CAAC;AAC7C,WAAW,CAAC,IAAI,EAAE,CAAC;AAEnB,AACA,yBADyB;IACrB,aAAa,GAAG;IAClB,GAAG,EAAE,EAAE,CAAC,YAAY,CAAC,SAAS,GAAG,6BAA6B,CAAC;IAC/D,IAAI,EAAE,EAAE,CAAC,YAAY,CAAC,SAAS,GAAG,8BAA8B,CAAC;CAClE,CAAC;AACF,IAAI,cAAc,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,EAAG,6CAA6C;AAE7F,AACA,mCADmC;AACnC,KAAK,CAAC,YAAY,CAAC,aAAa,EAAE,GAAG,CAAC,CAChC,MAAM,CAAC,cAAc,CAAC,CAAC;AAE7B,OAAO,CAAC,GAAG,CAAC,qDAAqD,CAAC,CAAC;AACnE,OAAO,CAAC,GAAG,CAAC,yCAAyC,EAAE,cAAc,CAAC,CAAC;AACvE,OAAO,CAAC,GAAG,CAAC,qDAAqD,CAAC,CAAC","file":"server.js","sourceRoot":"/Users/ac/repos/pres-o365-node/officeaddin-outlook/","sourcesContent":["/// <reference path=\"../../tools/typings/tsd.d.ts\" />\n/// <reference path=\"../../tools/typings/server.d.ts\" />\n\nimport fs = require('fs');\nimport https = require('https');\nimport http = require('http');\nimport express = require('express');\nvar expressHandlebars = require('hbs');\nvar controllerFactory = require('./controllers/index');\n\n// setup express\nvar app = express();\n\n// configure handlebars as the view engine\nexpressHandlebars.registerPartials(__dirname + '/views');\n\n// configure express to use handlebars as the view engine\napp.set('view engine', 'hbs');\n// change express default where to look for views on the server\napp.set('views', __dirname + '/views');\n\n// setup express to have static resource folders\napp.use('/public', express.static(__dirname + '/../public'));\napp.use('/public/vendor', express.static(__dirname + '/../../bower_components'));\napp.use('/app', express.static(__dirname + '/../app'));\n\n// load UX and API controllers\nvar controllers = new controllerFactory(app);\ncontrollers.init();\n\n// setup ssl self hosting\nvar https_options = {\n  key: fs.readFileSync(__dirname + '/../../../localhost-key.pem'),\n  cert: fs.readFileSync(__dirname + '/../../../localhost-cert.pem')\n};\nvar httpServerPort = process.env.PORT || 8443;  // use server value (for Azure) or local port\n\n// create & startup HTTPS webserver\nhttps.createServer(https_options, app)\n     .listen(httpServerPort);\n\nconsole.log('+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+');\nconsole.log('Web Server listening at https://[..]:%s', httpServerPort);\nconsole.log('+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+');\n"]}