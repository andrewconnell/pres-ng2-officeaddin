{
  "ACDEMO - 02 - ": {
    "prefix": "acd-02-main.ts",
    "body": [
      "export class AppLoader {",
      "  constructor() {",
      "    this.initOfficeAddin();",
      "  }",
      "  private initOfficeAddin(): void {",
      "    Office.initialize = (reason: Office.InitializationReason) => {",
      "      console.log('initializing Office.js');",
      " ",
      "      platformBrowserDynamic().bootstrapModule(AppModule)",
      "        .then(success => console.log('ng2 bootstrap success', success))",
      "        .catch(error => console.error('ng2 bootstrap error', error));",
      "    };",
      "  }",
      "}",
      "let ng2app: AppLoader = new AppLoader();"
    ],
    "description": ""
  },
  "ACDEMO - 06 - customer-list.component.ts": {
    "prefix": "acd-06-customer-list.component.ts",
    "body": [
      "import { Component, OnInit } from '@angular/core';",
      " ",
      "import {",
      "  CrmService,",
      "  OfficeService",
      "} from '../services/index';",
      "import { ICustomer } from '../../../shared/models/ICustomer';",
      " ",
      "@Component({",
      "  moduleId: module.id,",
      "  providers: [",
      "    CrmService,",
      "    OfficeService",
      "  ],",
      "  selector: 'minicrm-customer-list',",
      "  styleUrls: ['customer-list.component.css'],",
      "  templateUrl: 'customer-list.component.html'",
      "})",
      "export class CustomerListComponent implements OnInit {",
      "  public lookupCandidates: ICustomer[] = [];",
      " ",
      "  constructor(",
      "    private officeService: OfficeService,",
      "    private crmService: CrmService) { }",
      " ",
      "  public ngOnInit(): void {",
      "    console.log('ngOnInit: CustomerListComponent');",
      "    // lookup customers from currently selected email",
      "    this.loadMatchesFromEmail();",
      "  }",
      " ",
      "  private loadMatchesFromEmail(): void {",
      "    // use the OfficeService to get all words that start with a capital letter",
      "    //  which are possible name candidates",
      "    this.officeService.getWordCandidatesFromEmail()",
      "      .then((candidates: string[]) => {",
      "        // take candidate words from email & submit to MiniCRM to find matching",
      "        //  customers",
      "        this.crmService.lookupCustomerPartials(candidates)",
      "          .then((results: ICustomer[]) => {",
      "            // take the matching customers to assign to the public property",
      "            //  on the component",
      "            this.lookupCandidates = results;",
      "          });",
      "      });",
      "  }",
      " ",
      "  private getCustomerInitials(customer: ICustomer): string {",
      "    return customer.name.replace(/[a-z]/g, '').replace(' ', '');",
      "  }",
      "}"
    ],
    "description": ""
  },
  "ACDEMO - 09 - getCustomerInitials": {
    "prefix": "acd-09-getCustomerInitials",
    "body": [
      "private getCustomerInitials(customer: ICustomer): string {",
      "  return customer.name.replace(/[a-z]/g, '').replace(' ', '');",
      "}"
    ],
    "description": ""
  },
  "ACDEMO - 10 - officeService.ts": {
    "prefix": "acd-10-officeService.ts",
    "body": [
      "import { Injectable } from '@angular/core';",
      " ",
      "@Injectable()",
      "export class OfficeService {",
      "  /**",
      "   * Retrieves word candidates from the body of the currently selected email in",
      "   * the hosting Outlook client.",
      "   *",
      "   * @returns Promise<string[]>   - Promise of an array of words that could be people's names.",
      "   */",
      "  public getWordCandidatesFromEmail(): Promise<string[]> {",
      "    let promise: Promise<string[]> = new Promise<string[]>((resolve, reject) => {",
      "      try {",
      "        let currentEmail: Office.Types.ItemRead = Office.cast.item.toItemRead(Office.context.mailbox.item);",
      "        console.log('getWordCandidatesFromEmail(): currentEmail', currentEmail);",
      " ",
      "        let candidates: string[] = currentEmail.getRegExMatchesByName('PossibleName');",
      "        console.log('getWordCandidatesFromEmail(): candidates in email', candidates);",
      " ",
      "        resolve(candidates);",
      "      } catch (error) {",
      "        reject(error);",
      "      }",
      "    });",
      " ",
      "    return promise;",
      "  }",
      " ",
      "}"
    ],
    "description": ""
  },
  "ACDEMO - 11 - crmService.ts": {
    "prefix": "acd-11-crmService.ts",
    "body": [
      "import { Injectable } from '@angular/core';",
      "import { Http, Response } from '@angular/http';",
      " ",
      "import { ICustomer } from '../../../shared/models/ICustomer';",
      " ",
      "@Injectable()",
      "export class CrmService {",
      " ",
      "  constructor(private http: Http) { }",
      " ",
      "  public lookupCustomerPartials(possibleCustomers: string[]): Promise<ICustomer[]> {",
      "    let promise: Promise<ICustomer[]> = new Promise<ICustomer[]>((resolve, reject) => {",
      "      try {",
      "        // if no names provided, return empty",
      "        if (!possibleCustomers || possibleCustomers.length === 0) {",
      "          console.warn('lookupCustomerPartials(): no candidates provided to lookup');",
      "          resolve(new Array<ICustomer>());",
      "        }",
      " ",
      "        // build the filter",
      "        let filter: string = possibleCustomers.join(',');",
      " ",
      "        // create lookup query",
      "        let queryEndpoint: string = '/api/customers/lookupbyname/' + filter;",
      " ",
      "        // execute the query",
      "        this.http.request(queryEndpoint)",
      "          .subscribe((response: Response) => {",
      "            console.log('lookupCustomerPartials(): response from API', response);",
      "            resolve(<ICustomer[]>response.json());",
      "          });",
      "      } catch (error) {",
      "        reject(error);",
      "      }",
      "    });",
      " ",
      "    return promise;",
      "  }",
      " ",
      "}"
    ],
    "description": ""
  }
}
