{
  "ACDEMO - 02 - LogService.ts body": {
    "prefix": "acd-02-logservice.ts",
    "body": [
      "/**",
      "  * Wrapper function to console logger.",
      "  *",
      "  * @param  {string} message   - Message to write to console.",
      "  * @param  {any} more?        - Optional additional objec to include in message.",
      "  * @returns void",
      "  */",
      "public log(message: string, more?: any): void {",
      "  if (more === undefined) {",
      "    console.log('%s:%s | %s', this.LOG_PREFIX, this.category, message);",
      "  } else {",
      "    console.log('%s:%s | %s', this.LOG_PREFIX, this.category, message, more);",
      "  }",
      "}",
      "",
      "/**",
      "  * Wrapper function to console logger.",
      "  *",
      "  * @param  {string} message   - Message to write to console.",
      "  * @param  {any} more?        - Optional additional objec to include in message.",
      "  * @returns void",
      "  */",
      "public info(message: string, more?: any): void {",
      "  if (more === undefined) {",
      "    console.info('%s:%s | %s', this.LOG_PREFIX, this.category, message);",
      "  } else {",
      "    console.info('%s:%s | %s', this.LOG_PREFIX, this.category, message, more);",
      "  }",
      "}",
      "",
      "/**",
      "  * Wrapper function to console logger.",
      "  *",
      "  * @param  {string} message   - Message to write to console.",
      "  * @param  {any} more?        - Optional additional objec to include in message.",
      "  * @returns void",
      "  */",
      "public warn(message: string, more?: any): void {",
      "  if (more === undefined) {",
      "    console.warn('%s:%s | %s', this.LOG_PREFIX, this.category, message);",
      "  } else {",
      "    console.warn('%s:%s | %s', this.LOG_PREFIX, this.category, message, more);",
      "  }",
      "}",
      "",
      "/**",
      "  * Wrapper function to console logger.",
      "  *",
      "  * @param  {string} message   - Message to write to console.",
      "  * @param  {any} more?        - Optional additional objec to include in message.",
      "  * @returns void",
      "  */",
      "public error(message: string, more?: any): void {",
      "  if (more === undefined) {",
      "    console.error('%s:%s | %s', this.LOG_PREFIX, this.category, message);",
      "  } else {",
      "    console.error('%s:%s | %s', this.LOG_PREFIX, this.category, message, more);",
      "  }",
      "}"
    ],
    "description": ""
  },
  "ACDEMO - 06 - customer-list.component.ts":{
    "prefix": "acd-06-customer-list.component.ts",
    "body": [
      "import { Component, OnInit } from '@angular/core';",
      " ",
      "import { LogService } from '../services/logService';",
      "import { OfficeService } from '../services/officeService';",
      "import { CrmService } from '../services/crmService';",
      "import { ICustomer } from '../../../shared/models/ICustomer';",
      " ",
      "@Component({",
      "  moduleId: module.id,",
      "  selector: 'minicrm-customer-list',",
      "  templateUrl: 'customer-list.component.html',",
      "  styleUrls: ['customer-list.component.css']",
      "})",
      "export class CustomerListComponent implements OnInit {",
      "  public lookupCandidates: ICustomer[] = [];",
      " ",
      "  constructor(private logService: LogService,",
      "              private officeService: OfficeService,",
      "              private crmService: CrmService) {",
      "  }",
      " ",
      "  public ngOnInit() {",
      "    this.logService.info('ngOnInit: CustomerListComponent');",
      " ",
      "    // lookup customers from currently selected email",
      "    this.loadMatchesFromEmail();",
      "  }",
      " ",
      "  private loadMatchesFromEmail(): void {",
      "    this.officeService.getWordCandidatesFromEmail()",
      "      .then((candidates: string[]) => {",
      "        this.crmService.lookupCustomerPartials(candidates)",
      "          .then((results: ICustomer[]) => {",
      "            this.lookupCandidates = results;",
      "          });",
      "      });",
      "  }",
      " ",
      "  private getCustomerInitials(customer: ICustomer): string {",
      "    return customer.name.replace(/[a-z]/g, '').replace(' ', '');",
      "  }",
      "}"
    ],
    "description": ""
  },
  "ACDEMO - 09 - getCustomerInitials":{
    "prefix": "acd-09-getCustomerInitials",
    "body": [
      "private getCustomerInitials(customer: ICustomer): string {",
      "  return customer.name.replace(/[a-z]/g, '').replace(' ', '');",
      "}"
    ],
    "description": ""
  },
  "ACDEMO - 10 - officeService.ts":{
    "prefix": "acd-10-officeService.ts",
    "body": [
      "import { Injectable } from '@angular/core';",
      " ",
      "import { LogService } from '../services/logService';",
      " ",
      "@Injectable()",
      "export class OfficeService {",
      " ",
      "  constructor(private logService: LogService) { }",
      " ",
      "  /**",
      "   * Retrieves word candidates from the body of the currently selected email in",
      "   * the hosting Outlook client.",
      "   *",
      "   * @returns Promise<string[]>   - Promise of an array of words that could be people's names.",
      "   */",
      "  public getWordCandidatesFromEmail(): Promise<string[]> {",
      "    let promise: Promise<string[]> = new Promise<string[]>((resolve, reject) => {",
      "      try {",
      "        let currentEmail = Office.cast.item.toItemRead(Office.context.mailbox.item);",
      "        this.logService.info('getWordCandidatesFromEmail(): currentEmail', currentEmail);",
      " ",
      "        let candidates: string[] = currentEmail.getRegExMatchesByName('PossibleName');",
      "        this.logService.info('getWordCandidatesFromEmail(): candidates in email', candidates);",
      " ",
      "        resolve(candidates);",
      "      } catch (error) {",
      "        reject(error);",
      "      }",
      "    });",
      " ",
      "    return promise;",
      "  }",
      " ",
      "}"
    ],
    "description": ""
  },
  "ACDEMO - 11 - crmService.ts":{
    "prefix": "acd-11-crmService.ts",
    "body": [
      "import { Injectable } from '@angular/core';", 
      "import { Http, Response } from '@angular/http';", 
      " ", 
      "import { LogService } from '../services/logService';", 
      "import { ICustomer } from '../../../shared/models/ICustomer';", 
      " ", 
      "@Injectable()", 
      "export class CrmService {", 
      " ", 
      "  /**", 
      "   * Creates new instance of CrmService.", 
      "   *", 
      "   * @param  {Http} http               - DI by Angular", 
      "   * @param  {LogService} logService   - DI by Angular", 
      "   * @param  {OfficeService} officeService - DI by Angular", 
      "   * @param  {CrmService} crmService   - DI by Angular", 
      "   */", 
      "  constructor(private http: Http,", 
      "              private logService: LogService) { }", 
      " ", 
      "  /**", 
      "   * Get customers from MiniCRM that match the specified values.", 
      "   *", 
      "   * @param  {string[]} possibleCustomers   - Array of possible customer names.", 
      " ", 
      "   * @returns Promise<ICustomer[]>          - Array of matching customers in the MiniCRM system.", 
      "   */", 
      "  public lookupCustomerPartials(possibleCustomers: string[]): Promise<ICustomer[]> {", 
      "    let promise: Promise<ICustomer[]> = new Promise<ICustomer[]>((resolve, reject) => {", 
      "      try {", 
      "        // if no names provided, return empty", 
      "        if (!possibleCustomers || possibleCustomers.length === 0) {", 
      "          this.logService.warn('lookupCustomerPartials(): no candidates provided to lookup');", 
      "          resolve(new Array<ICustomer>());", 
      "        }", 
      " ", 
      "        // build the filter", 
      "        let filter: string = possibleCustomers.join(',');", 
      " ", 
      "        // create lookup query", 
      "        let queryEndpoint = '/api/customers/lookupbyname/' + filter;", 
      " ", 
      "        // execute the query", 
      "        this.http.request(queryEndpoint)", 
      "          .subscribe((response: Response) => {", 
      "            this.logService.log('lookupCustomerPartials(): response from API', response);", 
      "            resolve(<ICustomer[]>response.json());", 
      "          });", 
      "      } catch (error) {", 
      "        reject(error);", 
      "      }", 
      "    });", 
      " ", 
      "    return promise;", 
      "  }", 
      " ", 
      "}"
    ],
    "description": ""
  }
}